<div class="canvas-container"></div>

<script>
  import * as THREE from "three";
  import { EffectComposer } from "three/addons/postprocessing/EffectComposer.js";
  import { RenderPass } from "three/addons/postprocessing/RenderPass.js";
  import { ShaderPass } from "three/addons/postprocessing/ShaderPass.js";

  import { RGBShiftShader } from "three/addons/shaders/RGBShiftShader.js";
  import { DotScreenShader } from "three/addons/shaders/DotScreenShader.js";
  import { OutputPass } from "three/addons/postprocessing/OutputPass.js";
  import { OrbitControls } from "three/addons/controls/OrbitControls.js";
  import {
    ColorGUIHelper,
    makeDirectionalLightGUI,
    makeSpotLightGUI,
    makeXYZGUI,
    makeDirectionalLightHelper,
    makeSpotlightHelper,
  } from "../js/GUIUtils.ts";
  import { GUI } from "three/addons/libs/lil-gui.module.min.js";

  // INIT CONTAINER
  const container = document.querySelector(".canvas-container") as HTMLElement;
  const getHeight = () => {
    return container.offsetHeight;
  };
  // END INIT CONTAINER

  // INIT RENDERER AND GUI
  const renderer = new THREE.WebGLRenderer({ antialias: true });
  renderer.setPixelRatio(window.devicePixelRatio);
  renderer.setSize(window.innerWidth, getHeight());
  renderer.shadowMap.enabled = true;
  renderer.shadowMap.type = THREE.PCFSoftShadowMap;
  // const gui = new GUI();
  // END INIT RENDERER AND GUI

  // INIT CAMERA
  const camera = new THREE.PerspectiveCamera(
    75,
    window.innerWidth / getHeight(),
    0.1,
    2000
  );
  camera.position.set(0, 0, 400);
  // makeXYZGUI(gui, camera.position, "cameraPosition", undefined, -800, 800, 1);
  // END INIT CAMERA

  // INIT SCENE
  const scene = new THREE.Scene();
  // END INIT SCENE

  // INIT CONTROLS
  // const controls = new OrbitControls(camera, container);
  // controls.target.set(0, 0, 0);
  // controls.update();
  // END INIT CONTROLS

  // INIT BACKGROUND PLANE
  const planeGeo = new THREE.PlaneGeometry(
    container.offsetWidth,
    container.offsetHeight
  );
  const planeMat = new THREE.MeshPhongMaterial({
    color: "#fff",
  });
  const planeBg = new THREE.Mesh(planeGeo, planeMat);
  planeBg.receiveShadow = true;
  planeBg.position.set(0, 0, -400);
  scene.add(planeBg);
  // makeXYZGUI(gui, planeBg.position, "planePosition", undefined, -800, 800, 1);
  // add color to gui
  // gui.add(new ColorGUIHelper(planeMat, "color"), "value").name("planeColor");
  // END INIT BACKGROUND PLANE

  // INIT CLUSTER OBJECT
  const cluster = new THREE.Object3D();
  scene.add(cluster);
  const clusterGeometry = new THREE.SphereGeometry(1, 7, 4);
  const clusterMaterial = new THREE.MeshPhysicalMaterial({
    color: "#fff",
    flatShading: true,
    // reflectivity: 100,
    // shininess: 1000,
    roughness: 0.1,
    metalness: 1,
    clearcoat: 1,
    clearcoatRoughness: 0.1,
  });

  for (let i = 0; i < 100; i++) {
    const mesh = new THREE.Mesh(clusterGeometry, clusterMaterial);
    mesh.position
      .set(Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5)
      .normalize();
    mesh.position.multiplyScalar(Math.random() * 400);
    mesh.rotation.set(Math.random() * 2, Math.random() * 2, Math.random() * 2);
    mesh.scale.x = mesh.scale.y = mesh.scale.z = Math.random() * 50;
    mesh.castShadow = true;
    mesh.receiveShadow = true;
    cluster.add(mesh);
  }
  // END INIT CLUSTER OBJECT

  // INIT LIGHTS
  const light1Color = "#243144";
  const light1Zed = 400;
  const light1Intensity = 100000;
  const light1 = new THREE.SpotLight(light1Color, light1Intensity);
  light1.position.set(0, 0, light1Zed);
  light1.target.position.set(0, 0, 10);
  light1.castShadow = true;
  light1.distance = 2000;
  light1.angle = THREE.MathUtils.degToRad(60);
  light1.penumbra = 1;
  scene.add(light1);
  scene.add(light1.target);
  // makeSpotlightHelper(gui, light1, "light1", scene);

  const light2Color = "#ffffff";
  const light2Zed = 0;
  const light2Intensity = 2;
  const light2 = new THREE.DirectionalLight(light2Color, light2Intensity);
  light2.position.set(0, -800, light2Zed);
  light2.target.position.set(0, 0, 0);
  light2.castShadow = true;
  scene.add(light2);
  scene.add(light2.target);
  // makeDirectionalLightHelper(gui, light2, "light2", scene);

  const light3Color = "#ff6600";
  const light3Zed = 0;
  const light3Intensity = 2;
  const light3 = new THREE.DirectionalLight(light3Color, light3Intensity);
  light3.position.set(800, 0, light3Zed);
  light3.target.position.set(0, 0, 0);
  light3.castShadow = true;
  scene.add(light3);
  scene.add(light3.target);
  // makeDirectionalLightHelper(gui, light3, "light3", scene);

  const light4Color = "#0099cc";
  const light4Zed = 0;
  const light4Intensity = 2;
  const light4 = new THREE.DirectionalLight(light4Color, light4Intensity);
  light4.position.set(-800, 0, light4Zed);
  light4.target.position.set(0, 0, 0);
  light4.castShadow = true;
  scene.add(light4);
  scene.add(light4.target);
  // makeDirectionalLightHelper(gui, light4, "light4", scene);

  const light5Color = "#1a2532";
  const light5Zed = 200;
  const light5Intensity = 100000;
  const light5 = new THREE.SpotLight(light5Color, light5Intensity);
  light5.position.set(0, 400, light5Zed);
  light5.target.position.set(0, 0, 150);
  light5.castShadow = true;
  light5.distance = 1000;
  light5.angle = THREE.MathUtils.degToRad(120);
  light5.penumbra = 0;
  scene.add(light5);
  scene.add(light5.target);
  // makeSpotlightHelper(gui, light5, "light5", scene);
  // END INIT LIGHTS

  const animate = () => {
    cluster.rotation.y += 0.001;
    renderer.render(scene, camera);
  };

  renderer.setAnimationLoop(animate);
  container.appendChild(renderer.domElement);

  // init();
</script>
